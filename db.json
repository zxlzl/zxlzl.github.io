{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1585643637001},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1585643637001},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1585643637002},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1585643637001},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1585643637002},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1585643637008},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1585643480934},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1585643637002},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1585643637003},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1585643637002},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1585643637003},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1585643637003},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1585643637003},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1585643637004},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1585643637007},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1585643637007},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1585643637002},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1585643637003},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1585643637003},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1585643637007},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1585643637007},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1585643637008},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1585643637007},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1585643637007},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1585643637002},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1585643637003},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1585643637007},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1585643637006},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1585643637006},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1585643637007},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1585643637007},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1585643637007},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1585643637004},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1585643637004},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1585643637004},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1585643637004},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1585643637005},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1585643637005},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1585643637004},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1585643637005},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1585643637005},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1585643637005},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1585643637006},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1585643637016},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1585643637016},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1585643637016},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1585643637016},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1585643637016},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1585643637017},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1585643637018},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1585643637018},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1585643637018},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1585643637008},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1585643637010},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1585643637015},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1585643637016},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1585643637005},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1585643637006},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1585643637006},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1585643637006},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1585643637006},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1585643637006},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1585643637017},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1585643637017},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1585643637017},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1585643637017},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1585643637017},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1585643637016},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1585643637008},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1585643637008},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1585643637008},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1585643637009},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1585643637009},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1585643637009},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1585643637009},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1585643637009},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1585643637009},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1585643637009},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1585643637009},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1585643637010},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1585643637011},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1585643637011},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1585643637013},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1585643637013},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1585643637012},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1585643637015},{"_id":"public/2020/03/31/hello-world/index.html","hash":"43b97c07d020dfd764226503a156892c53ac2a06","modified":1585663505668},{"_id":"public/archives/index.html","hash":"d59fa6324461e044dc7855e9d5de055df7709da4","modified":1585663505668},{"_id":"public/archives/2020/index.html","hash":"3e9123dde025e89e58a39d64de13eaf33eb7f316","modified":1585663505668},{"_id":"public/archives/2020/03/index.html","hash":"048b2fab0c046dda8c8ffaec15ba0f2c095c94da","modified":1585663505668},{"_id":"public/index.html","hash":"6017ddd8dc8bb32e5a6d8033f0b3aa0900c8ad2b","modified":1585663505668},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1585643748176},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1585643748176},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1585643748176},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1585643748176},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1585643748176},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1585643748176},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1585643748176},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1585643748176},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1585643748176},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1585643748176},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1585643748176},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1585643748176},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1585643748176},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1585643748176},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1585643748176},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1585643748176},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1585643748176},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1585643748176},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1585643748176},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1585643748176},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1585643748176},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1585643748176},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1585643748176},{"_id":"source/.DS_Store","hash":"752ebdab1af507d7c551c3b1dfaa7df4d5e41a86","modified":1585662359474},{"_id":"source/_posts/article-title.md","hash":"6a8d16f2a232c72442732d27137da204bd289323","modified":1585647426572},{"_id":"public/2020/03/31/article-title/index.html","hash":"6b6433c93e468532fd00e26d2b5fc16cacd5633a","modified":1585647601548},{"_id":"source/_posts/.DS_Store","hash":"f6b3ad5b60bf447357449fb8940c65eb8b7f0b9e","modified":1585662364478},{"_id":"source/_posts/img/test.png","hash":"672f591ba48e390c647ce3e400c46710ee853c1d","modified":1583390723000},{"_id":"source/_posts/img/.DS_Store","hash":"1f188607706e1055ff339fdc317f2b8406e73fe8","modified":1585646651771},{"_id":"source/_posts/article-title/test.png","hash":"672f591ba48e390c647ce3e400c46710ee853c1d","modified":1585647011923},{"_id":"source/_posts/article-title/.DS_Store","hash":"1f188607706e1055ff339fdc317f2b8406e73fe8","modified":1585646651771},{"_id":"public/2020/03/31/article-title/test.png","hash":"672f591ba48e390c647ce3e400c46710ee853c1d","modified":1585647445027},{"_id":"source/_posts/xxxx.md","hash":"be9121c93d8193a626ce3f92a63e5757e65654f1","modified":1585647886212},{"_id":"source/_posts/xxxx/test.png","hash":"672f591ba48e390c647ce3e400c46710ee853c1d","modified":1585647575547},{"_id":"public/2020/03/31/xxxx/index.html","hash":"b7e0ed7caff86ddc81871dffa43ca224faae378e","modified":1585647890854},{"_id":"public/2020/03/31/xxxx/test.png","hash":"672f591ba48e390c647ce3e400c46710ee853c1d","modified":1585647601548},{"_id":"source/_posts/ss.md","hash":"f9cb5148327473fa5d1ca83273722cc585579ca8","modified":1585663110403},{"_id":"source/_posts/《Just-JavaScript》01-思维模型.md","hash":"4b17df87736139794d341684be28c3615931d2cb","modified":1585662248647},{"_id":"source/_posts/ss/te.jpeg","hash":"b4410b8964fce8c9d1e3746c498908edbd5bc0d2","modified":1585496267265},{"_id":"public/2020/03/31/《Just-JavaScript》01-思维模型/index.html","hash":"dc0cfc40a13410f826b8d74f47a4e28c0731b703","modified":1585663505668},{"_id":"public/2020/03/31/ss/index.html","hash":"9994f3be346a22530956577790bf967ba31cef6b","modified":1585663457948},{"_id":"public/tags/JavaScript/index.html","hash":"45649e853ba26c3e7e0e690472549a2007862aba","modified":1585663505668},{"_id":"public/2020/03/31/ss/te.jpeg","hash":"b4410b8964fce8c9d1e3746c498908edbd5bc0d2","modified":1585662434916},{"_id":"source/_posts/ss/little_prince.jpg","hash":"7681437e5bc55bed710cd543a00441442b20b1c8","modified":1585662723370},{"_id":"public/2020/03/31/ss/little_prince.jpg","hash":"7681437e5bc55bed710cd543a00441442b20b1c8","modified":1585662904800},{"_id":"source/_posts/《Just-JavaScript》02-JavaScript宇宙.md","hash":"4ec2cd38bda5ffedb3bccf46f35ca2cfc1fa58dd","modified":1585663381603},{"_id":"public/2020/03/31/《Just-JavaScript》02-JavaScript宇宙/index.html","hash":"28352849f1ee16371e9dbccee5ecb731e8768384","modified":1585663505668}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-03-31T08:31:20.933Z","updated":"2020-03-31T08:31:20.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8fncis50000769hhzui0ouf","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"《Just JavaScript》01.思维模型","date":"2020-03-31T13:40:45.000Z","_content":"\n读以下代码：\n\n``` javascript\nlet a = 10;\nlet b = a;\na = 0;\n```\n\n当他们运行后a和b的值是多少？在你往下阅读之前，先在你的脑子中想出答案。\n\n如果你已经写了一段时间的JavaScript，你可能会想：“这比我每天写的代码简单多了，意义何在？”\n\n这个练习的目标不是向你介绍变量，我们认为你已经对这些很熟悉了。相反的，它是为了让你注意并反思你的思维模型。\n\n## 什么是思维模型\n\n再次阅读上面的代码，目的是真正确定结果是什么。（我们稍后看为什么这个目的很重要）\n\n当你第二次读它的时候，一步步地注意你脑子里发生的事，你可能会有这样的独白：\n\n``` javascript\n// 1.声明一个变量a,并给它赋值10\nlet a = 10;\n// 2.声明一个变量b,将a的值赋给它,a为10,所以b也为10\nlet b = a;\n// 3.将0赋给a\na = 0;\n// 4.所以最后的答案是a的值为0，b的值为10\n```\n\n可能你脑中想的会有点不一样，可能你想的是给a设置值而不是赋值，或者你可能用不同的顺序读它。甚至你最后得出了不同的结果。注意一下具体哪里不同，即使是这段独白也无法真正捕捉到你脑海中发生的事情。你可能会说“把b设为a”，但是设置一个变量意味着什么呢？\n\n你可能会发现，对每个熟悉的基本编程概念（比如变量）和操作（比如赋值），会有一套根深蒂固的类比与之相关。一些来自于现实的世界，其他的可能会从你最初学到的领域重新运用，比如数学中的数字。这些类比可能会部分重叠甚至矛盾，但是它们仍然帮助你理解在代码中发生了什么。\n\n举个例子，很多人最初把变量当做盒子来学习，你可以往里面放东西。当你看到一个变量的时候，尽管你并没有真正地想象出一个盒子，但是在你的脑海里它们可能仍表现得像一个盒子。这些在你脑海中相似的运作方式被我们称做思维模型。思维模型对编程很久的你来说可能有难度，但是你要尝试注意和反思它们。它们可能是视觉的、空间的和机械的思维捷径的组合。\n\n这些直觉（类似把变量比作盒子）在我们整个编程生涯中会影响我们如何读代码。但是有时候，我们的思维模型是错误的。可能我们早期读过的辅导课为了能简单的解释一些东西而牺牲了它的正确性。也许我们错误的从之前学过的另一种语言转移了关于特定语言特征的直觉。也许我们从某段代码推断出一种思维模型，但从未验证它是否准确。\n\n识别和解决这些问题就是这本书《Just JavaScript》的全部内容。我们将逐步构建（或者，可能的话，重新构建）你关于JavaScript的思维模型，使之准确而有用。一个好的思维模型将会帮助你更快的定位和修复bug，更好的理解别人的代码，对你自己写的代码更自信。\n\n（顺带一提，a的值为0，b的值为10是正确答案）。\n\n## 快慢编码\n\n丹尼尔·卡尼曼的《思考，快与慢》是一本广受欢迎的非小说类书籍。它的中心论点是，人类在思考时使用两种不同的“系统”。\n\n只要有可能，我们就依靠“快速”系统。我们与许多动物共享这个紫铜，这给我们惊人的力量，就像走路时不摔倒一样。这个“快速”系统擅长模式匹配（生存所必需！！）以及“内脏反应”。但是它并不擅长计划。\n\n独特的是，由于额叶的发育，人类也有一个“慢”思维系统。这个“慢”思维系统负责复杂的逐步的推理。它让我们计划未来的事件，参与争论或遵循数学证明。\n\n因为使用“慢”系统在精神上非常消耗，所以我们倾向于默认使用“快”系统，即使在处理诸如编码之类的智能任务时也是如此。\n\n想象你正忙于大量的工作，并且你希望快速识别此函数的功能，快速浏览以下代码：\n\n``` javascript\nfunction duplicateSpreadsheet(original) {\n    if (original.hasPendingChanges) {\n        throw new Error('You need to save the file before you can duplicate it.');\n    }\n    let copy = {\n        created: Date.now(),\n        author: original.author,\n        cells: original.cells,\n        metadata: original.metadata,\n    };\n    copy.metadata.title = 'Copy of ' + original.metadata.title;\n    return copy;\n}\n```\n\n你可能会思考：\n\n* 这个函数复制一个电子表格\n* 如果初始电子表格不存在它会抛出错误\n* 它给新的电子表格标题前加了“Copy of”\n\n你可能没有注意到（如果你注意到了，那就太好了！）这个函数也意外地改变了原始电子表格的标题。\n\n每个程序员每天都会遇到这样的错误。但是现在你知道bug存在了，你会换种方式读代码吗？如果你一直在使用“快”模式阅读代码，则很可能会切换到更费劲的“慢”模式来查找他。\n\n在“快”模式下，我们通过名字、注释和它总体的结构猜测代码干了什么。而在“慢”模式下，我们逐步追溯代码做了什么。\n\n这就是为什么正确的思维模式非常重要。在我们的脑海中模拟一台计算机已经够难了——而这种努力被错误的思维模式所浪费。\n\n如果你根本找不到bug，别担心，这意味着你会从这门课中得到最大的收获！在接下来的模块中，我们将一起重塑JavaScript的思维模型，以便你一目了然地看到bug。\n\n在下一个模块，我们将开始为一些最基本的JavaScript概念（值和变量）构建思维模型。","source":"_posts/《Just-JavaScript》01-思维模型.md","raw":"---\ntitle: 《Just JavaScript》01.思维模型\ndate: 2020-03-31 21:40:45\ntags: JavaScript\n---\n\n读以下代码：\n\n``` javascript\nlet a = 10;\nlet b = a;\na = 0;\n```\n\n当他们运行后a和b的值是多少？在你往下阅读之前，先在你的脑子中想出答案。\n\n如果你已经写了一段时间的JavaScript，你可能会想：“这比我每天写的代码简单多了，意义何在？”\n\n这个练习的目标不是向你介绍变量，我们认为你已经对这些很熟悉了。相反的，它是为了让你注意并反思你的思维模型。\n\n## 什么是思维模型\n\n再次阅读上面的代码，目的是真正确定结果是什么。（我们稍后看为什么这个目的很重要）\n\n当你第二次读它的时候，一步步地注意你脑子里发生的事，你可能会有这样的独白：\n\n``` javascript\n// 1.声明一个变量a,并给它赋值10\nlet a = 10;\n// 2.声明一个变量b,将a的值赋给它,a为10,所以b也为10\nlet b = a;\n// 3.将0赋给a\na = 0;\n// 4.所以最后的答案是a的值为0，b的值为10\n```\n\n可能你脑中想的会有点不一样，可能你想的是给a设置值而不是赋值，或者你可能用不同的顺序读它。甚至你最后得出了不同的结果。注意一下具体哪里不同，即使是这段独白也无法真正捕捉到你脑海中发生的事情。你可能会说“把b设为a”，但是设置一个变量意味着什么呢？\n\n你可能会发现，对每个熟悉的基本编程概念（比如变量）和操作（比如赋值），会有一套根深蒂固的类比与之相关。一些来自于现实的世界，其他的可能会从你最初学到的领域重新运用，比如数学中的数字。这些类比可能会部分重叠甚至矛盾，但是它们仍然帮助你理解在代码中发生了什么。\n\n举个例子，很多人最初把变量当做盒子来学习，你可以往里面放东西。当你看到一个变量的时候，尽管你并没有真正地想象出一个盒子，但是在你的脑海里它们可能仍表现得像一个盒子。这些在你脑海中相似的运作方式被我们称做思维模型。思维模型对编程很久的你来说可能有难度，但是你要尝试注意和反思它们。它们可能是视觉的、空间的和机械的思维捷径的组合。\n\n这些直觉（类似把变量比作盒子）在我们整个编程生涯中会影响我们如何读代码。但是有时候，我们的思维模型是错误的。可能我们早期读过的辅导课为了能简单的解释一些东西而牺牲了它的正确性。也许我们错误的从之前学过的另一种语言转移了关于特定语言特征的直觉。也许我们从某段代码推断出一种思维模型，但从未验证它是否准确。\n\n识别和解决这些问题就是这本书《Just JavaScript》的全部内容。我们将逐步构建（或者，可能的话，重新构建）你关于JavaScript的思维模型，使之准确而有用。一个好的思维模型将会帮助你更快的定位和修复bug，更好的理解别人的代码，对你自己写的代码更自信。\n\n（顺带一提，a的值为0，b的值为10是正确答案）。\n\n## 快慢编码\n\n丹尼尔·卡尼曼的《思考，快与慢》是一本广受欢迎的非小说类书籍。它的中心论点是，人类在思考时使用两种不同的“系统”。\n\n只要有可能，我们就依靠“快速”系统。我们与许多动物共享这个紫铜，这给我们惊人的力量，就像走路时不摔倒一样。这个“快速”系统擅长模式匹配（生存所必需！！）以及“内脏反应”。但是它并不擅长计划。\n\n独特的是，由于额叶的发育，人类也有一个“慢”思维系统。这个“慢”思维系统负责复杂的逐步的推理。它让我们计划未来的事件，参与争论或遵循数学证明。\n\n因为使用“慢”系统在精神上非常消耗，所以我们倾向于默认使用“快”系统，即使在处理诸如编码之类的智能任务时也是如此。\n\n想象你正忙于大量的工作，并且你希望快速识别此函数的功能，快速浏览以下代码：\n\n``` javascript\nfunction duplicateSpreadsheet(original) {\n    if (original.hasPendingChanges) {\n        throw new Error('You need to save the file before you can duplicate it.');\n    }\n    let copy = {\n        created: Date.now(),\n        author: original.author,\n        cells: original.cells,\n        metadata: original.metadata,\n    };\n    copy.metadata.title = 'Copy of ' + original.metadata.title;\n    return copy;\n}\n```\n\n你可能会思考：\n\n* 这个函数复制一个电子表格\n* 如果初始电子表格不存在它会抛出错误\n* 它给新的电子表格标题前加了“Copy of”\n\n你可能没有注意到（如果你注意到了，那就太好了！）这个函数也意外地改变了原始电子表格的标题。\n\n每个程序员每天都会遇到这样的错误。但是现在你知道bug存在了，你会换种方式读代码吗？如果你一直在使用“快”模式阅读代码，则很可能会切换到更费劲的“慢”模式来查找他。\n\n在“快”模式下，我们通过名字、注释和它总体的结构猜测代码干了什么。而在“慢”模式下，我们逐步追溯代码做了什么。\n\n这就是为什么正确的思维模式非常重要。在我们的脑海中模拟一台计算机已经够难了——而这种努力被错误的思维模式所浪费。\n\n如果你根本找不到bug，别担心，这意味着你会从这门课中得到最大的收获！在接下来的模块中，我们将一起重塑JavaScript的思维模型，以便你一目了然地看到bug。\n\n在下一个模块，我们将开始为一些最基本的JavaScript概念（值和变量）构建思维模型。","slug":"《Just-JavaScript》01-思维模型","published":1,"updated":"2020-03-31T13:44:08.647Z","_id":"ck8fy8ok80000hijb5uwf7xgp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>读以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a;</span><br><span class=\"line\">a = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当他们运行后a和b的值是多少？在你往下阅读之前，先在你的脑子中想出答案。</p>\n<p>如果你已经写了一段时间的JavaScript，你可能会想：“这比我每天写的代码简单多了，意义何在？”</p>\n<p>这个练习的目标不是向你介绍变量，我们认为你已经对这些很熟悉了。相反的，它是为了让你注意并反思你的思维模型。</p>\n<h2 id=\"什么是思维模型\"><a href=\"#什么是思维模型\" class=\"headerlink\" title=\"什么是思维模型\"></a>什么是思维模型</h2><p>再次阅读上面的代码，目的是真正确定结果是什么。（我们稍后看为什么这个目的很重要）</p>\n<p>当你第二次读它的时候，一步步地注意你脑子里发生的事，你可能会有这样的独白：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.声明一个变量a,并给它赋值10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2.声明一个变量b,将a的值赋给它,a为10,所以b也为10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a;</span><br><span class=\"line\"><span class=\"comment\">// 3.将0赋给a</span></span><br><span class=\"line\">a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 4.所以最后的答案是a的值为0，b的值为10</span></span><br></pre></td></tr></table></figure>\n\n<p>可能你脑中想的会有点不一样，可能你想的是给a设置值而不是赋值，或者你可能用不同的顺序读它。甚至你最后得出了不同的结果。注意一下具体哪里不同，即使是这段独白也无法真正捕捉到你脑海中发生的事情。你可能会说“把b设为a”，但是设置一个变量意味着什么呢？</p>\n<p>你可能会发现，对每个熟悉的基本编程概念（比如变量）和操作（比如赋值），会有一套根深蒂固的类比与之相关。一些来自于现实的世界，其他的可能会从你最初学到的领域重新运用，比如数学中的数字。这些类比可能会部分重叠甚至矛盾，但是它们仍然帮助你理解在代码中发生了什么。</p>\n<p>举个例子，很多人最初把变量当做盒子来学习，你可以往里面放东西。当你看到一个变量的时候，尽管你并没有真正地想象出一个盒子，但是在你的脑海里它们可能仍表现得像一个盒子。这些在你脑海中相似的运作方式被我们称做思维模型。思维模型对编程很久的你来说可能有难度，但是你要尝试注意和反思它们。它们可能是视觉的、空间的和机械的思维捷径的组合。</p>\n<p>这些直觉（类似把变量比作盒子）在我们整个编程生涯中会影响我们如何读代码。但是有时候，我们的思维模型是错误的。可能我们早期读过的辅导课为了能简单的解释一些东西而牺牲了它的正确性。也许我们错误的从之前学过的另一种语言转移了关于特定语言特征的直觉。也许我们从某段代码推断出一种思维模型，但从未验证它是否准确。</p>\n<p>识别和解决这些问题就是这本书《Just JavaScript》的全部内容。我们将逐步构建（或者，可能的话，重新构建）你关于JavaScript的思维模型，使之准确而有用。一个好的思维模型将会帮助你更快的定位和修复bug，更好的理解别人的代码，对你自己写的代码更自信。</p>\n<p>（顺带一提，a的值为0，b的值为10是正确答案）。</p>\n<h2 id=\"快慢编码\"><a href=\"#快慢编码\" class=\"headerlink\" title=\"快慢编码\"></a>快慢编码</h2><p>丹尼尔·卡尼曼的《思考，快与慢》是一本广受欢迎的非小说类书籍。它的中心论点是，人类在思考时使用两种不同的“系统”。</p>\n<p>只要有可能，我们就依靠“快速”系统。我们与许多动物共享这个紫铜，这给我们惊人的力量，就像走路时不摔倒一样。这个“快速”系统擅长模式匹配（生存所必需！！）以及“内脏反应”。但是它并不擅长计划。</p>\n<p>独特的是，由于额叶的发育，人类也有一个“慢”思维系统。这个“慢”思维系统负责复杂的逐步的推理。它让我们计划未来的事件，参与争论或遵循数学证明。</p>\n<p>因为使用“慢”系统在精神上非常消耗，所以我们倾向于默认使用“快”系统，即使在处理诸如编码之类的智能任务时也是如此。</p>\n<p>想象你正忙于大量的工作，并且你希望快速识别此函数的功能，快速浏览以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duplicateSpreadsheet</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (original.hasPendingChanges) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'You need to save the file before you can duplicate it.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copy = &#123;</span><br><span class=\"line\">        created: <span class=\"built_in\">Date</span>.now(),</span><br><span class=\"line\">        author: original.author,</span><br><span class=\"line\">        cells: original.cells,</span><br><span class=\"line\">        metadata: original.metadata,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    copy.metadata.title = <span class=\"string\">'Copy of '</span> + original.metadata.title;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能会思考：</p>\n<ul>\n<li>这个函数复制一个电子表格</li>\n<li>如果初始电子表格不存在它会抛出错误</li>\n<li>它给新的电子表格标题前加了“Copy of”</li>\n</ul>\n<p>你可能没有注意到（如果你注意到了，那就太好了！）这个函数也意外地改变了原始电子表格的标题。</p>\n<p>每个程序员每天都会遇到这样的错误。但是现在你知道bug存在了，你会换种方式读代码吗？如果你一直在使用“快”模式阅读代码，则很可能会切换到更费劲的“慢”模式来查找他。</p>\n<p>在“快”模式下，我们通过名字、注释和它总体的结构猜测代码干了什么。而在“慢”模式下，我们逐步追溯代码做了什么。</p>\n<p>这就是为什么正确的思维模式非常重要。在我们的脑海中模拟一台计算机已经够难了——而这种努力被错误的思维模式所浪费。</p>\n<p>如果你根本找不到bug，别担心，这意味着你会从这门课中得到最大的收获！在接下来的模块中，我们将一起重塑JavaScript的思维模型，以便你一目了然地看到bug。</p>\n<p>在下一个模块，我们将开始为一些最基本的JavaScript概念（值和变量）构建思维模型。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>读以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a;</span><br><span class=\"line\">a = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当他们运行后a和b的值是多少？在你往下阅读之前，先在你的脑子中想出答案。</p>\n<p>如果你已经写了一段时间的JavaScript，你可能会想：“这比我每天写的代码简单多了，意义何在？”</p>\n<p>这个练习的目标不是向你介绍变量，我们认为你已经对这些很熟悉了。相反的，它是为了让你注意并反思你的思维模型。</p>\n<h2 id=\"什么是思维模型\"><a href=\"#什么是思维模型\" class=\"headerlink\" title=\"什么是思维模型\"></a>什么是思维模型</h2><p>再次阅读上面的代码，目的是真正确定结果是什么。（我们稍后看为什么这个目的很重要）</p>\n<p>当你第二次读它的时候，一步步地注意你脑子里发生的事，你可能会有这样的独白：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.声明一个变量a,并给它赋值10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2.声明一个变量b,将a的值赋给它,a为10,所以b也为10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a;</span><br><span class=\"line\"><span class=\"comment\">// 3.将0赋给a</span></span><br><span class=\"line\">a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 4.所以最后的答案是a的值为0，b的值为10</span></span><br></pre></td></tr></table></figure>\n\n<p>可能你脑中想的会有点不一样，可能你想的是给a设置值而不是赋值，或者你可能用不同的顺序读它。甚至你最后得出了不同的结果。注意一下具体哪里不同，即使是这段独白也无法真正捕捉到你脑海中发生的事情。你可能会说“把b设为a”，但是设置一个变量意味着什么呢？</p>\n<p>你可能会发现，对每个熟悉的基本编程概念（比如变量）和操作（比如赋值），会有一套根深蒂固的类比与之相关。一些来自于现实的世界，其他的可能会从你最初学到的领域重新运用，比如数学中的数字。这些类比可能会部分重叠甚至矛盾，但是它们仍然帮助你理解在代码中发生了什么。</p>\n<p>举个例子，很多人最初把变量当做盒子来学习，你可以往里面放东西。当你看到一个变量的时候，尽管你并没有真正地想象出一个盒子，但是在你的脑海里它们可能仍表现得像一个盒子。这些在你脑海中相似的运作方式被我们称做思维模型。思维模型对编程很久的你来说可能有难度，但是你要尝试注意和反思它们。它们可能是视觉的、空间的和机械的思维捷径的组合。</p>\n<p>这些直觉（类似把变量比作盒子）在我们整个编程生涯中会影响我们如何读代码。但是有时候，我们的思维模型是错误的。可能我们早期读过的辅导课为了能简单的解释一些东西而牺牲了它的正确性。也许我们错误的从之前学过的另一种语言转移了关于特定语言特征的直觉。也许我们从某段代码推断出一种思维模型，但从未验证它是否准确。</p>\n<p>识别和解决这些问题就是这本书《Just JavaScript》的全部内容。我们将逐步构建（或者，可能的话，重新构建）你关于JavaScript的思维模型，使之准确而有用。一个好的思维模型将会帮助你更快的定位和修复bug，更好的理解别人的代码，对你自己写的代码更自信。</p>\n<p>（顺带一提，a的值为0，b的值为10是正确答案）。</p>\n<h2 id=\"快慢编码\"><a href=\"#快慢编码\" class=\"headerlink\" title=\"快慢编码\"></a>快慢编码</h2><p>丹尼尔·卡尼曼的《思考，快与慢》是一本广受欢迎的非小说类书籍。它的中心论点是，人类在思考时使用两种不同的“系统”。</p>\n<p>只要有可能，我们就依靠“快速”系统。我们与许多动物共享这个紫铜，这给我们惊人的力量，就像走路时不摔倒一样。这个“快速”系统擅长模式匹配（生存所必需！！）以及“内脏反应”。但是它并不擅长计划。</p>\n<p>独特的是，由于额叶的发育，人类也有一个“慢”思维系统。这个“慢”思维系统负责复杂的逐步的推理。它让我们计划未来的事件，参与争论或遵循数学证明。</p>\n<p>因为使用“慢”系统在精神上非常消耗，所以我们倾向于默认使用“快”系统，即使在处理诸如编码之类的智能任务时也是如此。</p>\n<p>想象你正忙于大量的工作，并且你希望快速识别此函数的功能，快速浏览以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duplicateSpreadsheet</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (original.hasPendingChanges) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'You need to save the file before you can duplicate it.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copy = &#123;</span><br><span class=\"line\">        created: <span class=\"built_in\">Date</span>.now(),</span><br><span class=\"line\">        author: original.author,</span><br><span class=\"line\">        cells: original.cells,</span><br><span class=\"line\">        metadata: original.metadata,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    copy.metadata.title = <span class=\"string\">'Copy of '</span> + original.metadata.title;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能会思考：</p>\n<ul>\n<li>这个函数复制一个电子表格</li>\n<li>如果初始电子表格不存在它会抛出错误</li>\n<li>它给新的电子表格标题前加了“Copy of”</li>\n</ul>\n<p>你可能没有注意到（如果你注意到了，那就太好了！）这个函数也意外地改变了原始电子表格的标题。</p>\n<p>每个程序员每天都会遇到这样的错误。但是现在你知道bug存在了，你会换种方式读代码吗？如果你一直在使用“快”模式阅读代码，则很可能会切换到更费劲的“慢”模式来查找他。</p>\n<p>在“快”模式下，我们通过名字、注释和它总体的结构猜测代码干了什么。而在“慢”模式下，我们逐步追溯代码做了什么。</p>\n<p>这就是为什么正确的思维模式非常重要。在我们的脑海中模拟一台计算机已经够难了——而这种努力被错误的思维模式所浪费。</p>\n<p>如果你根本找不到bug，别担心，这意味着你会从这门课中得到最大的收获！在接下来的模块中，我们将一起重塑JavaScript的思维模型，以便你一目了然地看到bug。</p>\n<p>在下一个模块，我们将开始为一些最基本的JavaScript概念（值和变量）构建思维模型。</p>\n"},{"title":"《Just JavaScript》02.JavaScript宇宙","date":"2020-03-31T14:00:26.000Z","_content":"\n在JavaScript中，它的开始就是值。\n\n什么是指？这很难解释。\n\n这就好比问数学中的数字是什么，几何中的点是什么。值就是JavaScript中的类似这样的一个东西。\n\n数字是值，但其他东西也是值，比如对象和函数。但是很多东西，比如if语句或变量声明都不是值。\n\n## 值和代码\n\n为了将我们的JavaScript程序中的所有值与其他值区别开来，我想象一下安东尼画的小王子：\n\n![](/blog_imgs/just_javascript/02/little_prince.jpg)\n\n我站在一颗小行星上——这是我程序的代码。\n\n从表面上看，我看到了if语句和变量声明、逗号、大括号以及可能从JavaScript代码中找到的所有其他东西。\n\n我得代码包括“函数调用”或是“多次执行此操作”甚至“抛出错误”等指令。我一步一步地完成这些指令——在我的小行星上做着差事。\n\n但偶尔我会抬头看看。\n\n在一个晴朗的夜晚，我在JavaScript天空中到了不同的值：booleans、numbers、strings、symbols、functions、objects、null和undefined——天呐！我可以在代码中使用他们，但他们并不存在于代码中。\n\n在我的JavaScript宇宙中，值飘荡在太空。\n\n![](/blog_imgs/just_javascript/02/universe.png)\n\n“等等，”你可能会说，“我一直认为值存在于我的代码里！”。在这里，我请求你的认知发生飞跃性的变化。要想成功构建这样的思维模型，还需要几个模块。[Give It Five Minutes](https://www.jianshu.com/p/9adb15be9ac2)\n\n回到值上面。大体上，这有两种值。\n\n### 原始值\n\n**原始值**包括数字和字符串等。打开浏览器的控制台并使用 `console.log()` 打印以下原始值：\n\n``` javascript\nconsole.log(2)\nconsole.log(\"hello\")\nconsole.log(undefined)\n```\n\n所有的原始值都有一些共同点。**我的代码中没有什么可以影响他们**。这听起来有点模糊，所以我们将在下一个模块中具体探讨这是什么意思。现在，我要说的是，原始值就像星星一样——冰冷而遥远，但在我需要它们的时候总是在那里。\n\n这是第一种值。\n\n### 对象和函数\n\n**对象和函数**也是值，但他们不是原始值。这使他们变得特别。继续在控制台打印一些这样的值：\n\n``` javascript\nconsole.log({})\nconsole.log([])\nconsole.log(x => x * 2)\n```\n\n请注意，浏览器的控制台是如何以不同于原始值的方式显示它们的。有些浏览器可能会在他们前面显示一个箭头，或者单点击它们的时候执行一些特殊的操作。如果你安装了一些不同的浏览器（例如Chrome和Firefox），比较它们是如何可视化对象和函数的。\n\n对象和函数是特殊的，因为我可以从代码中操作它们。举个例子，我可以将它们与其他值连接起来。这也是模糊的——所以我们将在后面的模块中完善这个想法。现在，我可以说，\n如果原始值像遥远的恒星，那么对象和函数更像漂浮在代码附近的岩石。它们离得很近，我才能够操作它们。\n\n这就是第二种值。\n\n你可能有问题。很好。如果你问一个问题，JavaScript世界可能会回答它！当然前提是你知道怎么提问。\n\n## 表达式\n\n但也有很多问题JavaScript无法回答。如果你想知道是向你最好的朋友坦白你的真实感受，还是一直等到你俩变成骷髅，JavaScript不会有多大帮助。\n\n但是JavaScript很乐意回答这样的一些问题。这些问题有一个特殊的名字——表达式。\n\n如果我们“询问”表达式2+2，JavaScript将用4“回答”。\n\n``` javascript\nconsole.log(2 + 2); // 4\n```\n\n**表达式是JavaScript可以回答的问题。JavaScript使用它唯一知道的方式——值，回答表达式。**\n\n![](/blog_imgs/just_javascript/02/expression.gif)\n\n如果“表达式”这个词让你感到困惑，请将其视为一段表示值的代码。你可能会听到人们说2+2“结果”或“得到”4。这些都是说同一件事的不同方式。\n\n我们问JavaScript 2+2，它的答案是4。表达式总是得到一个值。现在我们对表达方式的了解已经足够危险了！\n\n我之前说JavaScript有多种值：numbers、strings、objects等等。我们如何知道每次说的是哪种值呢？\n\n这听起来是个问题。我们敢问吗？\n\n### 检查类型\n\n首先，JavaScript宇宙中的所有值可能看起来都一样——就像天空中的亮点。但是如果你仔细观察，你会发现只有不到十种不同类型的值。相同类型的值的行为方式类似。\n\n如果我们想检查一个值的类型，我们可以用typeof运算符。JavaScript将用一个预先确定的字符串值来回答我们的问题，比如“number”、“string”或“object”。\n\n![](/blog_imgs/just_javascript/02/telescope.png)\n\n下面是一些您可以在浏览器控制台中尝试的示例:\n\n``` javascript\nconsole.log(typeof(2)); // \"number\"\nconsole.log(typeof(\"hello\")); // \"string\"\nconsole.log(typeof(undefined)); // \"undefined\"\n```\n\n这里， `typeof(2)` 是一个表达式，它得到“number”值。\n\n严格的说，typeof不需要使用括号。例如， ` typeof 2` 和 `typeof(2)` 的工作原理是相同的。然而，有时需要括号来避免歧义。如果我们在typeof后面省略了括号，下面的一个例子就会中断。试着猜猜是哪一个：\n\n``` javascript\nconsole.log(typeof({})); // \"object\"\nconsole.log(typeof([])); // \"object\"\nconsole.log(typeof(x => x * 2)); // \"function\"\n```\n\n你可以在浏览器控制台中验证你的猜测。\n\n![](/blog_imgs/just_javascript/02/typeof.gif)\n\n现在再来看看最后三个例子——这次要密切关注它们的结果。你有没有发现这些结果令人惊讶？为什么？\n\n## 值的类型\n\n作为一个有抱负的天文学家，您可能想知道JavaScript宇宙中可以观察到的每一种类型的值。经过将近25年的JavaScript研究，科学家们只发现了9种类型。\n\n### 原始值\n\n* **Undefined**(undefined)，用于无意中丢失的值\n* **Null**(null), 用于故意丢失的值\n* **Booleans**(true or false)，用于逻辑操作\n* **Numbers**(-100, 3.14... )，用于数学计算\n* **Strings**(\"hello\", \"abracadabra\"... )，用于文本\n* **Symbols**(不常见)，用于隐藏实现的细节\n* **BigInts**(不常见、新的)，用于计算大数\n\n### 对象和函数\n\n* **Objects**({}... )，用于分组相关的数据和代码\n* **Functions**( `x => x * 2` ... )，用于引用代码\n\n### 没有别的类型了\n\n你可能会问：“那我使用的别的类型呢？比如数组？”\n\n**在JavaScript中，除了我们刚刚列举的值类型之外，没有其他基本值类型了**。剩下的都是对象！例如，甚至数组、日期和正则表达式基本上都是JavaScript中的对象：\n\n``` javascript\nconsole.log(typeof([])); // \"object\"\nconsole.log(typeof(new Date())); // \"object\"\nconsole.log(typeof(/(hello|goodbye)/)); // \"object\"\n```\n\n“我知道，”你可能会说，“这是因为一切都是对象！”。唉，这是一个流行的都市传说，但事实并非如此。尽管像 `\"hi\".toUpperCase()` 这样的代码使 `\"hi\"` 看起来像一个对象，但这只是一个幻觉。JavaScript会在执行此操作时创建包装器对象，然后立即将其丢弃。\n\n如果这个机制不太好明白也没事。**现在，你只需要记住原始值（如数字和字符串）不是对象。**\n\n## 总结\n\n让我们回顾一下我们目前所知道的：\n\n1. **除了值就是别的**：我们可以将值视为JavaScript雨中中“飘荡”的不同事物。它们不存在于我们的代码中，但我们可以从代码中引用它们。\n2. **有两种值**：它们是原始值，然后是对象和函数。总共有九种不同类型的值，每种类型都有特定的用途，但有些很少使用。\n3. **有些值很孤单**：比如null是Null类型的唯一的值，undefined也是Undefined类型的唯一值。我们之后会学习它，这两个孤独的值在很大程度上就是麻烦制造者。\n4. **我们可以使用表达式提问**：JavaScript将会用值来回答我们。例如，表达式2+2的答案是4。\n\n5.**我们可以通过typeof表达式来检测值的类型**：比如， `typeof(4)` 得到字符串“number”。\n\n## 练习\n\n是时候学以致用了。\n\n即使你已经有了相当丰富的JavaScript经验，也不要跳过练习题！就在几年前，我从其中学到了一些东西。\n\n[点击此处去做练习！](https://eggheadio.typeform.com/to/PLyTKB?email=akihi95@gmail.com&ck_subscriber_id=767004595)\n\n接下来我们将更详细地探讨原始值。我们看看这些不同的类型（比如数字和Null）有什么共同点，并学习相等在JavaScript中意味着什么。\n\n我们还将继续完善我们的思维模型。这部分提供了一个粗略的草图——一个近似值。我们将把焦点放在图片的不同部分，并用更多的细节填充它们，如[渐进式JPEG图像](https://www.liquidweb.com/kb/what-is-a-progressive-jpeg/?ck_subscriber_id=767004595)。\n\n这些看起来是很小的一步，但我们正在为未来的一切奠定基础。我们正在一起构建JavaScript宇宙。\n\n## 知识扩展\n\n1.[The history of “typeof null”](https://2ality.com/2013/10/typeof-null.html)\n\n","source":"_posts/《Just-JavaScript》02-JavaScript宇宙.md","raw":"---\ntitle: 《Just JavaScript》02.JavaScript宇宙\ndate: 2020-03-31 22:00:26\ntags:\n---\n\n在JavaScript中，它的开始就是值。\n\n什么是指？这很难解释。\n\n这就好比问数学中的数字是什么，几何中的点是什么。值就是JavaScript中的类似这样的一个东西。\n\n数字是值，但其他东西也是值，比如对象和函数。但是很多东西，比如if语句或变量声明都不是值。\n\n## 值和代码\n\n为了将我们的JavaScript程序中的所有值与其他值区别开来，我想象一下安东尼画的小王子：\n\n![](/blog_imgs/just_javascript/02/little_prince.jpg)\n\n我站在一颗小行星上——这是我程序的代码。\n\n从表面上看，我看到了if语句和变量声明、逗号、大括号以及可能从JavaScript代码中找到的所有其他东西。\n\n我得代码包括“函数调用”或是“多次执行此操作”甚至“抛出错误”等指令。我一步一步地完成这些指令——在我的小行星上做着差事。\n\n但偶尔我会抬头看看。\n\n在一个晴朗的夜晚，我在JavaScript天空中到了不同的值：booleans、numbers、strings、symbols、functions、objects、null和undefined——天呐！我可以在代码中使用他们，但他们并不存在于代码中。\n\n在我的JavaScript宇宙中，值飘荡在太空。\n\n![](/blog_imgs/just_javascript/02/universe.png)\n\n“等等，”你可能会说，“我一直认为值存在于我的代码里！”。在这里，我请求你的认知发生飞跃性的变化。要想成功构建这样的思维模型，还需要几个模块。[Give It Five Minutes](https://www.jianshu.com/p/9adb15be9ac2)\n\n回到值上面。大体上，这有两种值。\n\n### 原始值\n\n**原始值**包括数字和字符串等。打开浏览器的控制台并使用 `console.log()` 打印以下原始值：\n\n``` javascript\nconsole.log(2)\nconsole.log(\"hello\")\nconsole.log(undefined)\n```\n\n所有的原始值都有一些共同点。**我的代码中没有什么可以影响他们**。这听起来有点模糊，所以我们将在下一个模块中具体探讨这是什么意思。现在，我要说的是，原始值就像星星一样——冰冷而遥远，但在我需要它们的时候总是在那里。\n\n这是第一种值。\n\n### 对象和函数\n\n**对象和函数**也是值，但他们不是原始值。这使他们变得特别。继续在控制台打印一些这样的值：\n\n``` javascript\nconsole.log({})\nconsole.log([])\nconsole.log(x => x * 2)\n```\n\n请注意，浏览器的控制台是如何以不同于原始值的方式显示它们的。有些浏览器可能会在他们前面显示一个箭头，或者单点击它们的时候执行一些特殊的操作。如果你安装了一些不同的浏览器（例如Chrome和Firefox），比较它们是如何可视化对象和函数的。\n\n对象和函数是特殊的，因为我可以从代码中操作它们。举个例子，我可以将它们与其他值连接起来。这也是模糊的——所以我们将在后面的模块中完善这个想法。现在，我可以说，\n如果原始值像遥远的恒星，那么对象和函数更像漂浮在代码附近的岩石。它们离得很近，我才能够操作它们。\n\n这就是第二种值。\n\n你可能有问题。很好。如果你问一个问题，JavaScript世界可能会回答它！当然前提是你知道怎么提问。\n\n## 表达式\n\n但也有很多问题JavaScript无法回答。如果你想知道是向你最好的朋友坦白你的真实感受，还是一直等到你俩变成骷髅，JavaScript不会有多大帮助。\n\n但是JavaScript很乐意回答这样的一些问题。这些问题有一个特殊的名字——表达式。\n\n如果我们“询问”表达式2+2，JavaScript将用4“回答”。\n\n``` javascript\nconsole.log(2 + 2); // 4\n```\n\n**表达式是JavaScript可以回答的问题。JavaScript使用它唯一知道的方式——值，回答表达式。**\n\n![](/blog_imgs/just_javascript/02/expression.gif)\n\n如果“表达式”这个词让你感到困惑，请将其视为一段表示值的代码。你可能会听到人们说2+2“结果”或“得到”4。这些都是说同一件事的不同方式。\n\n我们问JavaScript 2+2，它的答案是4。表达式总是得到一个值。现在我们对表达方式的了解已经足够危险了！\n\n我之前说JavaScript有多种值：numbers、strings、objects等等。我们如何知道每次说的是哪种值呢？\n\n这听起来是个问题。我们敢问吗？\n\n### 检查类型\n\n首先，JavaScript宇宙中的所有值可能看起来都一样——就像天空中的亮点。但是如果你仔细观察，你会发现只有不到十种不同类型的值。相同类型的值的行为方式类似。\n\n如果我们想检查一个值的类型，我们可以用typeof运算符。JavaScript将用一个预先确定的字符串值来回答我们的问题，比如“number”、“string”或“object”。\n\n![](/blog_imgs/just_javascript/02/telescope.png)\n\n下面是一些您可以在浏览器控制台中尝试的示例:\n\n``` javascript\nconsole.log(typeof(2)); // \"number\"\nconsole.log(typeof(\"hello\")); // \"string\"\nconsole.log(typeof(undefined)); // \"undefined\"\n```\n\n这里， `typeof(2)` 是一个表达式，它得到“number”值。\n\n严格的说，typeof不需要使用括号。例如， ` typeof 2` 和 `typeof(2)` 的工作原理是相同的。然而，有时需要括号来避免歧义。如果我们在typeof后面省略了括号，下面的一个例子就会中断。试着猜猜是哪一个：\n\n``` javascript\nconsole.log(typeof({})); // \"object\"\nconsole.log(typeof([])); // \"object\"\nconsole.log(typeof(x => x * 2)); // \"function\"\n```\n\n你可以在浏览器控制台中验证你的猜测。\n\n![](/blog_imgs/just_javascript/02/typeof.gif)\n\n现在再来看看最后三个例子——这次要密切关注它们的结果。你有没有发现这些结果令人惊讶？为什么？\n\n## 值的类型\n\n作为一个有抱负的天文学家，您可能想知道JavaScript宇宙中可以观察到的每一种类型的值。经过将近25年的JavaScript研究，科学家们只发现了9种类型。\n\n### 原始值\n\n* **Undefined**(undefined)，用于无意中丢失的值\n* **Null**(null), 用于故意丢失的值\n* **Booleans**(true or false)，用于逻辑操作\n* **Numbers**(-100, 3.14... )，用于数学计算\n* **Strings**(\"hello\", \"abracadabra\"... )，用于文本\n* **Symbols**(不常见)，用于隐藏实现的细节\n* **BigInts**(不常见、新的)，用于计算大数\n\n### 对象和函数\n\n* **Objects**({}... )，用于分组相关的数据和代码\n* **Functions**( `x => x * 2` ... )，用于引用代码\n\n### 没有别的类型了\n\n你可能会问：“那我使用的别的类型呢？比如数组？”\n\n**在JavaScript中，除了我们刚刚列举的值类型之外，没有其他基本值类型了**。剩下的都是对象！例如，甚至数组、日期和正则表达式基本上都是JavaScript中的对象：\n\n``` javascript\nconsole.log(typeof([])); // \"object\"\nconsole.log(typeof(new Date())); // \"object\"\nconsole.log(typeof(/(hello|goodbye)/)); // \"object\"\n```\n\n“我知道，”你可能会说，“这是因为一切都是对象！”。唉，这是一个流行的都市传说，但事实并非如此。尽管像 `\"hi\".toUpperCase()` 这样的代码使 `\"hi\"` 看起来像一个对象，但这只是一个幻觉。JavaScript会在执行此操作时创建包装器对象，然后立即将其丢弃。\n\n如果这个机制不太好明白也没事。**现在，你只需要记住原始值（如数字和字符串）不是对象。**\n\n## 总结\n\n让我们回顾一下我们目前所知道的：\n\n1. **除了值就是别的**：我们可以将值视为JavaScript雨中中“飘荡”的不同事物。它们不存在于我们的代码中，但我们可以从代码中引用它们。\n2. **有两种值**：它们是原始值，然后是对象和函数。总共有九种不同类型的值，每种类型都有特定的用途，但有些很少使用。\n3. **有些值很孤单**：比如null是Null类型的唯一的值，undefined也是Undefined类型的唯一值。我们之后会学习它，这两个孤独的值在很大程度上就是麻烦制造者。\n4. **我们可以使用表达式提问**：JavaScript将会用值来回答我们。例如，表达式2+2的答案是4。\n\n5.**我们可以通过typeof表达式来检测值的类型**：比如， `typeof(4)` 得到字符串“number”。\n\n## 练习\n\n是时候学以致用了。\n\n即使你已经有了相当丰富的JavaScript经验，也不要跳过练习题！就在几年前，我从其中学到了一些东西。\n\n[点击此处去做练习！](https://eggheadio.typeform.com/to/PLyTKB?email=akihi95@gmail.com&ck_subscriber_id=767004595)\n\n接下来我们将更详细地探讨原始值。我们看看这些不同的类型（比如数字和Null）有什么共同点，并学习相等在JavaScript中意味着什么。\n\n我们还将继续完善我们的思维模型。这部分提供了一个粗略的草图——一个近似值。我们将把焦点放在图片的不同部分，并用更多的细节填充它们，如[渐进式JPEG图像](https://www.liquidweb.com/kb/what-is-a-progressive-jpeg/?ck_subscriber_id=767004595)。\n\n这些看起来是很小的一步，但我们正在为未来的一切奠定基础。我们正在一起构建JavaScript宇宙。\n\n## 知识扩展\n\n1.[The history of “typeof null”](https://2ality.com/2013/10/typeof-null.html)\n\n","slug":"《Just-JavaScript》02-JavaScript宇宙","published":1,"updated":"2020-03-31T14:03:01.603Z","_id":"ck8fyy0ic0000fajb7gje4sqe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在JavaScript中，它的开始就是值。</p>\n<p>什么是指？这很难解释。</p>\n<p>这就好比问数学中的数字是什么，几何中的点是什么。值就是JavaScript中的类似这样的一个东西。</p>\n<p>数字是值，但其他东西也是值，比如对象和函数。但是很多东西，比如if语句或变量声明都不是值。</p>\n<h2 id=\"值和代码\"><a href=\"#值和代码\" class=\"headerlink\" title=\"值和代码\"></a>值和代码</h2><p>为了将我们的JavaScript程序中的所有值与其他值区别开来，我想象一下安东尼画的小王子：</p>\n<p><img src=\"/blog_imgs/just_javascript/02/little_prince.jpg\" alt=\"\"></p>\n<p>我站在一颗小行星上——这是我程序的代码。</p>\n<p>从表面上看，我看到了if语句和变量声明、逗号、大括号以及可能从JavaScript代码中找到的所有其他东西。</p>\n<p>我得代码包括“函数调用”或是“多次执行此操作”甚至“抛出错误”等指令。我一步一步地完成这些指令——在我的小行星上做着差事。</p>\n<p>但偶尔我会抬头看看。</p>\n<p>在一个晴朗的夜晚，我在JavaScript天空中到了不同的值：booleans、numbers、strings、symbols、functions、objects、null和undefined——天呐！我可以在代码中使用他们，但他们并不存在于代码中。</p>\n<p>在我的JavaScript宇宙中，值飘荡在太空。</p>\n<p><img src=\"/blog_imgs/just_javascript/02/universe.png\" alt=\"\"></p>\n<p>“等等，”你可能会说，“我一直认为值存在于我的代码里！”。在这里，我请求你的认知发生飞跃性的变化。要想成功构建这样的思维模型，还需要几个模块。<a href=\"https://www.jianshu.com/p/9adb15be9ac2\" target=\"_blank\" rel=\"noopener\">Give It Five Minutes</a></p>\n<p>回到值上面。大体上，这有两种值。</p>\n<h3 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h3><p><strong>原始值</strong>包括数字和字符串等。打开浏览器的控制台并使用 <code>console.log()</code> 打印以下原始值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span>)</span><br></pre></td></tr></table></figure>\n\n<p>所有的原始值都有一些共同点。<strong>我的代码中没有什么可以影响他们</strong>。这听起来有点模糊，所以我们将在下一个模块中具体探讨这是什么意思。现在，我要说的是，原始值就像星星一样——冰冷而遥远，但在我需要它们的时候总是在那里。</p>\n<p>这是第一种值。</p>\n<h3 id=\"对象和函数\"><a href=\"#对象和函数\" class=\"headerlink\" title=\"对象和函数\"></a>对象和函数</h3><p><strong>对象和函数</strong>也是值，但他们不是原始值。这使他们变得特别。继续在控制台打印一些这样的值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>请注意，浏览器的控制台是如何以不同于原始值的方式显示它们的。有些浏览器可能会在他们前面显示一个箭头，或者单点击它们的时候执行一些特殊的操作。如果你安装了一些不同的浏览器（例如Chrome和Firefox），比较它们是如何可视化对象和函数的。</p>\n<p>对象和函数是特殊的，因为我可以从代码中操作它们。举个例子，我可以将它们与其他值连接起来。这也是模糊的——所以我们将在后面的模块中完善这个想法。现在，我可以说，<br>如果原始值像遥远的恒星，那么对象和函数更像漂浮在代码附近的岩石。它们离得很近，我才能够操作它们。</p>\n<p>这就是第二种值。</p>\n<p>你可能有问题。很好。如果你问一个问题，JavaScript世界可能会回答它！当然前提是你知道怎么提问。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>但也有很多问题JavaScript无法回答。如果你想知道是向你最好的朋友坦白你的真实感受，还是一直等到你俩变成骷髅，JavaScript不会有多大帮助。</p>\n<p>但是JavaScript很乐意回答这样的一些问题。这些问题有一个特殊的名字——表达式。</p>\n<p>如果我们“询问”表达式2+2，JavaScript将用4“回答”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> + <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>表达式是JavaScript可以回答的问题。JavaScript使用它唯一知道的方式——值，回答表达式。</strong></p>\n<p><img src=\"/blog_imgs/just_javascript/02/expression.gif\" alt=\"\"></p>\n<p>如果“表达式”这个词让你感到困惑，请将其视为一段表示值的代码。你可能会听到人们说2+2“结果”或“得到”4。这些都是说同一件事的不同方式。</p>\n<p>我们问JavaScript 2+2，它的答案是4。表达式总是得到一个值。现在我们对表达方式的了解已经足够危险了！</p>\n<p>我之前说JavaScript有多种值：numbers、strings、objects等等。我们如何知道每次说的是哪种值呢？</p>\n<p>这听起来是个问题。我们敢问吗？</p>\n<h3 id=\"检查类型\"><a href=\"#检查类型\" class=\"headerlink\" title=\"检查类型\"></a>检查类型</h3><p>首先，JavaScript宇宙中的所有值可能看起来都一样——就像天空中的亮点。但是如果你仔细观察，你会发现只有不到十种不同类型的值。相同类型的值的行为方式类似。</p>\n<p>如果我们想检查一个值的类型，我们可以用typeof运算符。JavaScript将用一个预先确定的字符串值来回答我们的问题，比如“number”、“string”或“object”。</p>\n<p><img src=\"/blog_imgs/just_javascript/02/telescope.png\" alt=\"\"></p>\n<p>下面是一些您可以在浏览器控制台中尝试的示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// \"number\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"string\">\"hello\"</span>)); <span class=\"comment\">// \"string\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里， <code>typeof(2)</code> 是一个表达式，它得到“number”值。</p>\n<p>严格的说，typeof不需要使用括号。例如， <code>typeof 2</code> 和 <code>typeof(2)</code> 的工作原理是相同的。然而，有时需要括号来避免歧义。如果我们在typeof后面省略了括号，下面的一个例子就会中断。试着猜猜是哪一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(&#123;&#125;)); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>([])); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>)); <span class=\"comment\">// \"function\"</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以在浏览器控制台中验证你的猜测。</p>\n<p><img src=\"/blog_imgs/just_javascript/02/typeof.gif\" alt=\"\"></p>\n<p>现在再来看看最后三个例子——这次要密切关注它们的结果。你有没有发现这些结果令人惊讶？为什么？</p>\n<h2 id=\"值的类型\"><a href=\"#值的类型\" class=\"headerlink\" title=\"值的类型\"></a>值的类型</h2><p>作为一个有抱负的天文学家，您可能想知道JavaScript宇宙中可以观察到的每一种类型的值。经过将近25年的JavaScript研究，科学家们只发现了9种类型。</p>\n<h3 id=\"原始值-1\"><a href=\"#原始值-1\" class=\"headerlink\" title=\"原始值\"></a>原始值</h3><ul>\n<li><strong>Undefined</strong>(undefined)，用于无意中丢失的值</li>\n<li><strong>Null</strong>(null), 用于故意丢失的值</li>\n<li><strong>Booleans</strong>(true or false)，用于逻辑操作</li>\n<li><strong>Numbers</strong>(-100, 3.14… )，用于数学计算</li>\n<li><strong>Strings</strong>(“hello”, “abracadabra”… )，用于文本</li>\n<li><strong>Symbols</strong>(不常见)，用于隐藏实现的细节</li>\n<li><strong>BigInts</strong>(不常见、新的)，用于计算大数</li>\n</ul>\n<h3 id=\"对象和函数-1\"><a href=\"#对象和函数-1\" class=\"headerlink\" title=\"对象和函数\"></a>对象和函数</h3><ul>\n<li><strong>Objects</strong>({}… )，用于分组相关的数据和代码</li>\n<li><strong>Functions</strong>( <code>x =&gt; x * 2</code> … )，用于引用代码</li>\n</ul>\n<h3 id=\"没有别的类型了\"><a href=\"#没有别的类型了\" class=\"headerlink\" title=\"没有别的类型了\"></a>没有别的类型了</h3><p>你可能会问：“那我使用的别的类型呢？比如数组？”</p>\n<p><strong>在JavaScript中，除了我们刚刚列举的值类型之外，没有其他基本值类型了</strong>。剩下的都是对象！例如，甚至数组、日期和正则表达式基本上都是JavaScript中的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>([])); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"regexp\">/(hello|goodbye)/</span>)); <span class=\"comment\">// \"object\"</span></span><br></pre></td></tr></table></figure>\n\n<p>“我知道，”你可能会说，“这是因为一切都是对象！”。唉，这是一个流行的都市传说，但事实并非如此。尽管像 <code>&quot;hi&quot;.toUpperCase()</code> 这样的代码使 <code>&quot;hi&quot;</code> 看起来像一个对象，但这只是一个幻觉。JavaScript会在执行此操作时创建包装器对象，然后立即将其丢弃。</p>\n<p>如果这个机制不太好明白也没事。<strong>现在，你只需要记住原始值（如数字和字符串）不是对象。</strong></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>让我们回顾一下我们目前所知道的：</p>\n<ol>\n<li><strong>除了值就是别的</strong>：我们可以将值视为JavaScript雨中中“飘荡”的不同事物。它们不存在于我们的代码中，但我们可以从代码中引用它们。</li>\n<li><strong>有两种值</strong>：它们是原始值，然后是对象和函数。总共有九种不同类型的值，每种类型都有特定的用途，但有些很少使用。</li>\n<li><strong>有些值很孤单</strong>：比如null是Null类型的唯一的值，undefined也是Undefined类型的唯一值。我们之后会学习它，这两个孤独的值在很大程度上就是麻烦制造者。</li>\n<li><strong>我们可以使用表达式提问</strong>：JavaScript将会用值来回答我们。例如，表达式2+2的答案是4。</li>\n</ol>\n<p>5.<strong>我们可以通过typeof表达式来检测值的类型</strong>：比如， <code>typeof(4)</code> 得到字符串“number”。</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>是时候学以致用了。</p>\n<p>即使你已经有了相当丰富的JavaScript经验，也不要跳过练习题！就在几年前，我从其中学到了一些东西。</p>\n<p><a href=\"https://eggheadio.typeform.com/to/PLyTKB?email=akihi95@gmail.com&ck_subscriber_id=767004595\" target=\"_blank\" rel=\"noopener\">点击此处去做练习！</a></p>\n<p>接下来我们将更详细地探讨原始值。我们看看这些不同的类型（比如数字和Null）有什么共同点，并学习相等在JavaScript中意味着什么。</p>\n<p>我们还将继续完善我们的思维模型。这部分提供了一个粗略的草图——一个近似值。我们将把焦点放在图片的不同部分，并用更多的细节填充它们，如<a href=\"https://www.liquidweb.com/kb/what-is-a-progressive-jpeg/?ck_subscriber_id=767004595\" target=\"_blank\" rel=\"noopener\">渐进式JPEG图像</a>。</p>\n<p>这些看起来是很小的一步，但我们正在为未来的一切奠定基础。我们正在一起构建JavaScript宇宙。</p>\n<h2 id=\"知识扩展\"><a href=\"#知识扩展\" class=\"headerlink\" title=\"知识扩展\"></a>知识扩展</h2><p>1.<a href=\"https://2ality.com/2013/10/typeof-null.html\" target=\"_blank\" rel=\"noopener\">The history of “typeof null”</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在JavaScript中，它的开始就是值。</p>\n<p>什么是指？这很难解释。</p>\n<p>这就好比问数学中的数字是什么，几何中的点是什么。值就是JavaScript中的类似这样的一个东西。</p>\n<p>数字是值，但其他东西也是值，比如对象和函数。但是很多东西，比如if语句或变量声明都不是值。</p>\n<h2 id=\"值和代码\"><a href=\"#值和代码\" class=\"headerlink\" title=\"值和代码\"></a>值和代码</h2><p>为了将我们的JavaScript程序中的所有值与其他值区别开来，我想象一下安东尼画的小王子：</p>\n<p><img src=\"/blog_imgs/just_javascript/02/little_prince.jpg\" alt=\"\"></p>\n<p>我站在一颗小行星上——这是我程序的代码。</p>\n<p>从表面上看，我看到了if语句和变量声明、逗号、大括号以及可能从JavaScript代码中找到的所有其他东西。</p>\n<p>我得代码包括“函数调用”或是“多次执行此操作”甚至“抛出错误”等指令。我一步一步地完成这些指令——在我的小行星上做着差事。</p>\n<p>但偶尔我会抬头看看。</p>\n<p>在一个晴朗的夜晚，我在JavaScript天空中到了不同的值：booleans、numbers、strings、symbols、functions、objects、null和undefined——天呐！我可以在代码中使用他们，但他们并不存在于代码中。</p>\n<p>在我的JavaScript宇宙中，值飘荡在太空。</p>\n<p><img src=\"/blog_imgs/just_javascript/02/universe.png\" alt=\"\"></p>\n<p>“等等，”你可能会说，“我一直认为值存在于我的代码里！”。在这里，我请求你的认知发生飞跃性的变化。要想成功构建这样的思维模型，还需要几个模块。<a href=\"https://www.jianshu.com/p/9adb15be9ac2\" target=\"_blank\" rel=\"noopener\">Give It Five Minutes</a></p>\n<p>回到值上面。大体上，这有两种值。</p>\n<h3 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h3><p><strong>原始值</strong>包括数字和字符串等。打开浏览器的控制台并使用 <code>console.log()</code> 打印以下原始值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span>)</span><br></pre></td></tr></table></figure>\n\n<p>所有的原始值都有一些共同点。<strong>我的代码中没有什么可以影响他们</strong>。这听起来有点模糊，所以我们将在下一个模块中具体探讨这是什么意思。现在，我要说的是，原始值就像星星一样——冰冷而遥远，但在我需要它们的时候总是在那里。</p>\n<p>这是第一种值。</p>\n<h3 id=\"对象和函数\"><a href=\"#对象和函数\" class=\"headerlink\" title=\"对象和函数\"></a>对象和函数</h3><p><strong>对象和函数</strong>也是值，但他们不是原始值。这使他们变得特别。继续在控制台打印一些这样的值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>请注意，浏览器的控制台是如何以不同于原始值的方式显示它们的。有些浏览器可能会在他们前面显示一个箭头，或者单点击它们的时候执行一些特殊的操作。如果你安装了一些不同的浏览器（例如Chrome和Firefox），比较它们是如何可视化对象和函数的。</p>\n<p>对象和函数是特殊的，因为我可以从代码中操作它们。举个例子，我可以将它们与其他值连接起来。这也是模糊的——所以我们将在后面的模块中完善这个想法。现在，我可以说，<br>如果原始值像遥远的恒星，那么对象和函数更像漂浮在代码附近的岩石。它们离得很近，我才能够操作它们。</p>\n<p>这就是第二种值。</p>\n<p>你可能有问题。很好。如果你问一个问题，JavaScript世界可能会回答它！当然前提是你知道怎么提问。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>但也有很多问题JavaScript无法回答。如果你想知道是向你最好的朋友坦白你的真实感受，还是一直等到你俩变成骷髅，JavaScript不会有多大帮助。</p>\n<p>但是JavaScript很乐意回答这样的一些问题。这些问题有一个特殊的名字——表达式。</p>\n<p>如果我们“询问”表达式2+2，JavaScript将用4“回答”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> + <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>表达式是JavaScript可以回答的问题。JavaScript使用它唯一知道的方式——值，回答表达式。</strong></p>\n<p><img src=\"/blog_imgs/just_javascript/02/expression.gif\" alt=\"\"></p>\n<p>如果“表达式”这个词让你感到困惑，请将其视为一段表示值的代码。你可能会听到人们说2+2“结果”或“得到”4。这些都是说同一件事的不同方式。</p>\n<p>我们问JavaScript 2+2，它的答案是4。表达式总是得到一个值。现在我们对表达方式的了解已经足够危险了！</p>\n<p>我之前说JavaScript有多种值：numbers、strings、objects等等。我们如何知道每次说的是哪种值呢？</p>\n<p>这听起来是个问题。我们敢问吗？</p>\n<h3 id=\"检查类型\"><a href=\"#检查类型\" class=\"headerlink\" title=\"检查类型\"></a>检查类型</h3><p>首先，JavaScript宇宙中的所有值可能看起来都一样——就像天空中的亮点。但是如果你仔细观察，你会发现只有不到十种不同类型的值。相同类型的值的行为方式类似。</p>\n<p>如果我们想检查一个值的类型，我们可以用typeof运算符。JavaScript将用一个预先确定的字符串值来回答我们的问题，比如“number”、“string”或“object”。</p>\n<p><img src=\"/blog_imgs/just_javascript/02/telescope.png\" alt=\"\"></p>\n<p>下面是一些您可以在浏览器控制台中尝试的示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// \"number\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"string\">\"hello\"</span>)); <span class=\"comment\">// \"string\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里， <code>typeof(2)</code> 是一个表达式，它得到“number”值。</p>\n<p>严格的说，typeof不需要使用括号。例如， <code>typeof 2</code> 和 <code>typeof(2)</code> 的工作原理是相同的。然而，有时需要括号来避免歧义。如果我们在typeof后面省略了括号，下面的一个例子就会中断。试着猜猜是哪一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(&#123;&#125;)); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>([])); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>)); <span class=\"comment\">// \"function\"</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以在浏览器控制台中验证你的猜测。</p>\n<p><img src=\"/blog_imgs/just_javascript/02/typeof.gif\" alt=\"\"></p>\n<p>现在再来看看最后三个例子——这次要密切关注它们的结果。你有没有发现这些结果令人惊讶？为什么？</p>\n<h2 id=\"值的类型\"><a href=\"#值的类型\" class=\"headerlink\" title=\"值的类型\"></a>值的类型</h2><p>作为一个有抱负的天文学家，您可能想知道JavaScript宇宙中可以观察到的每一种类型的值。经过将近25年的JavaScript研究，科学家们只发现了9种类型。</p>\n<h3 id=\"原始值-1\"><a href=\"#原始值-1\" class=\"headerlink\" title=\"原始值\"></a>原始值</h3><ul>\n<li><strong>Undefined</strong>(undefined)，用于无意中丢失的值</li>\n<li><strong>Null</strong>(null), 用于故意丢失的值</li>\n<li><strong>Booleans</strong>(true or false)，用于逻辑操作</li>\n<li><strong>Numbers</strong>(-100, 3.14… )，用于数学计算</li>\n<li><strong>Strings</strong>(“hello”, “abracadabra”… )，用于文本</li>\n<li><strong>Symbols</strong>(不常见)，用于隐藏实现的细节</li>\n<li><strong>BigInts</strong>(不常见、新的)，用于计算大数</li>\n</ul>\n<h3 id=\"对象和函数-1\"><a href=\"#对象和函数-1\" class=\"headerlink\" title=\"对象和函数\"></a>对象和函数</h3><ul>\n<li><strong>Objects</strong>({}… )，用于分组相关的数据和代码</li>\n<li><strong>Functions</strong>( <code>x =&gt; x * 2</code> … )，用于引用代码</li>\n</ul>\n<h3 id=\"没有别的类型了\"><a href=\"#没有别的类型了\" class=\"headerlink\" title=\"没有别的类型了\"></a>没有别的类型了</h3><p>你可能会问：“那我使用的别的类型呢？比如数组？”</p>\n<p><strong>在JavaScript中，除了我们刚刚列举的值类型之外，没有其他基本值类型了</strong>。剩下的都是对象！例如，甚至数组、日期和正则表达式基本上都是JavaScript中的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>([])); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())); <span class=\"comment\">// \"object\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(<span class=\"regexp\">/(hello|goodbye)/</span>)); <span class=\"comment\">// \"object\"</span></span><br></pre></td></tr></table></figure>\n\n<p>“我知道，”你可能会说，“这是因为一切都是对象！”。唉，这是一个流行的都市传说，但事实并非如此。尽管像 <code>&quot;hi&quot;.toUpperCase()</code> 这样的代码使 <code>&quot;hi&quot;</code> 看起来像一个对象，但这只是一个幻觉。JavaScript会在执行此操作时创建包装器对象，然后立即将其丢弃。</p>\n<p>如果这个机制不太好明白也没事。<strong>现在，你只需要记住原始值（如数字和字符串）不是对象。</strong></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>让我们回顾一下我们目前所知道的：</p>\n<ol>\n<li><strong>除了值就是别的</strong>：我们可以将值视为JavaScript雨中中“飘荡”的不同事物。它们不存在于我们的代码中，但我们可以从代码中引用它们。</li>\n<li><strong>有两种值</strong>：它们是原始值，然后是对象和函数。总共有九种不同类型的值，每种类型都有特定的用途，但有些很少使用。</li>\n<li><strong>有些值很孤单</strong>：比如null是Null类型的唯一的值，undefined也是Undefined类型的唯一值。我们之后会学习它，这两个孤独的值在很大程度上就是麻烦制造者。</li>\n<li><strong>我们可以使用表达式提问</strong>：JavaScript将会用值来回答我们。例如，表达式2+2的答案是4。</li>\n</ol>\n<p>5.<strong>我们可以通过typeof表达式来检测值的类型</strong>：比如， <code>typeof(4)</code> 得到字符串“number”。</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>是时候学以致用了。</p>\n<p>即使你已经有了相当丰富的JavaScript经验，也不要跳过练习题！就在几年前，我从其中学到了一些东西。</p>\n<p><a href=\"https://eggheadio.typeform.com/to/PLyTKB?email=akihi95@gmail.com&ck_subscriber_id=767004595\" target=\"_blank\" rel=\"noopener\">点击此处去做练习！</a></p>\n<p>接下来我们将更详细地探讨原始值。我们看看这些不同的类型（比如数字和Null）有什么共同点，并学习相等在JavaScript中意味着什么。</p>\n<p>我们还将继续完善我们的思维模型。这部分提供了一个粗略的草图——一个近似值。我们将把焦点放在图片的不同部分，并用更多的细节填充它们，如<a href=\"https://www.liquidweb.com/kb/what-is-a-progressive-jpeg/?ck_subscriber_id=767004595\" target=\"_blank\" rel=\"noopener\">渐进式JPEG图像</a>。</p>\n<p>这些看起来是很小的一步，但我们正在为未来的一切奠定基础。我们正在一起构建JavaScript宇宙。</p>\n<h2 id=\"知识扩展\"><a href=\"#知识扩展\" class=\"headerlink\" title=\"知识扩展\"></a>知识扩展</h2><p>1.<a href=\"https://2ality.com/2013/10/typeof-null.html\" target=\"_blank\" rel=\"noopener\">The history of “typeof null”</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck8fy8ok80000hijb5uwf7xgp","tag_id":"ck8fyd1nn0001hijb5vy4ci3y","_id":"ck8fyd1no0002hijbdy0feqwy"}],"Tag":[{"name":"JavaScript","_id":"ck8fyd1nn0001hijb5vy4ci3y"}]}}